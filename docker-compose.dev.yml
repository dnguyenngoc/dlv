# Development Docker Compose - Backend + Database only
# Frontend runs locally with: npm run dev

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dlv-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dlv
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./pkg/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dlv-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODE: dev
    container_name: dlv-backend-dev
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=dlv
      - SECRET_KEY=dlv-dev-secret-key-change-in-production
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./cmd:/app/cmd
      - ./internal:/app/internal
      - ./pkg:/app/pkg
      - ./go.mod:/app/go.mod
      - ./go.sum:/app/go.sum
    networks:
      - dlv-network
    command: >
      go run ./cmd/server/main.go
      --port 8080
      --db-host postgres
      --db-port 5432
      --db-user postgres
      --db-password postgres
      --db-name dlv
      --secret-key dlv-dev-secret-key-change-in-production
      --log-level debug

volumes:
  postgres-data:

networks:
  dlv-network:
    driver: bridge
