[project]
name = "backend"
version = "1.0.0"

description = "dlv project"
authors = [{ name = "Duy Nguyen", email = "duynguyenngoc@hotmail.com" }]

readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "fastapi>=0.120.2",
    "uvicorn[standard]>=0.38.0",
    "SQLAlchemy>=2.0.44",
    "psycopg2-binary>=2.9.11",
    "pydantic>=2.12.3",
    "pydantic-settings>=2.11.0",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "bcrypt==3.2.0",
    "neo4j>=6.0.2",
    "requests>=2.32.5",
]

[dependency-groups]
dev = [
    "ruff>=0.11.13",
    "pre-commit>=4.0.1",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.25.2",
]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools]
packages = ["app"]
include-package-data = true

[tool.setuptools.package-data]
app = ["app/**/*.py"]

# --- START Ruff Configuration ---
[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
# Enable fix behavior by-default when running ruff
fix = true
# Enumerate all fixed violations.
show-fixes = true
# Exclude directories (e.g., virtual environments, build artifacts)
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors (PEP 8)
  "F",   # pyflakes (general errors)
  "I",   # isort (import sorting)
  "D",   # pydocstyle (docstring conventions)
  "UP",  # pyupgrade (modern syntax)
  "ANN", # flake8-annotations (type hints)
  "B",   # flake8-bugbear (best practices)
  "N",   # pep8-naming
  "C90", # mccabe (complexity)
]
# Ignore specific rules if needed (example: ignore missing docstrings for __init__)
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D106", # Missing docstring in public nested class
  "D200", # One-line docstring should fit on one line
  "D415", # First line should end with a period, question mark, or exclamation point
  "ANN001", # Missing type annotation for function argument (for fixtures and callbacks)
  "ANN201", # Missing return type annotation for public function (FastAPI auto-detects)
  "B008", # Do not perform function call in argument defaults (FastAPI Depends pattern)
]
# Formatting options
[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false
# Use `\n` line endings for all files
line-ending = "lf"
# Enable reformatting of code snippets in docstrings
docstring-code-format = true
# Docstring style: Google
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.flake8-annotations]
# Suppress ANN401 for dynamically typed *args and **kwargs arguments
allow-star-arg-any = true
# Allow the omission of a return type hint for __init__ if at least one argument is annotated
mypy-init-return = true
# Suppress ANN000-level violations for arguments matching the "dummy" variable regex (like _)
suppress-dummy-args = true
# Suppress ANN200-level violations for functions
suppress-none-returning = true
[tool.ruff.lint.isort]
# Whether to place import from imports before straight imports when sorting
from-first = false
# --- END Ruff Configuration ---
